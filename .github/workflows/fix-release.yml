name: Fix Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Base release version"
        required: true

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.task }}
        run: |
          if [ "${{ matrix.task }}" = "lint" ]; then
            npm run lint
          else
            npm run test
          fi

  fix:
    needs: checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Checkout release branch
        run: |
          git fetch origin releases/${{ github.event.inputs.version }}:releases/${{ github.event.inputs.version }}
          git checkout releases/${{ github.event.inputs.version }}

      - name: Determine next fix number
        id: next_fix
        run: |
          TAGS=$(git tag -l "v${{ github.event.inputs.version }}_fix*")
          if [ -z "$TAGS" ]; then
            NEXT_FIX=1
          else
            MAX_FIX=$(echo "$TAGS" | sed -E "s/v${{ github.event.inputs.version }}_fix([0-9]+)/\1/" | sort -nr | head -n1)
            NEXT_FIX=$((MAX_FIX + 1))
          fi
          echo "NEXT_FIX=$NEXT_FIX" >> $GITHUB_OUTPUT

      - name: Login to Yandex Container Registry
        run: |
          echo "${{ secrets.YC_IAM_TOKEN }}" | docker login --username iam --password-stdin cr.yandex

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.version }}_fix${{ steps.next_fix.outputs.NEXT_FIX }}
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.version }}_latest

      - name: Create fix tag
        run: |
          git tag v${{ github.event.inputs.version }}_fix${{ steps.next_fix.outputs.NEXT_FIX }}
          git push origin v${{ github.event.inputs.version }}_fix${{ steps.next_fix.outputs.NEXT_FIX }}

      - name: Get previous fix tag
        id: get_prev_tag
        run: |
          TAGS=$(git tag -l "v${{ github.event.inputs.version }}_fix*")
          if [ -z "$TAGS" ]; then
            echo "prev_tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            LAST_TAG=$(echo "$TAGS" | sort -V | tail -n1)
            echo "prev_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Generate commit list
        id: commits
        run: |
          COMMITS=$(git log --pretty=format:'- %s' ${{ steps.get_prev_tag.outputs.prev_tag }}..HEAD)
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Find Release Issue
        id: find_issue
        uses: actions/github-script@v6
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });
            const issue = issues.find(i => i.title === `Release v${{ github.event.inputs.version }}`);
            return issue ? issue.number : 0;

      - name: Add Fix Comment to Issue
        if: ${{ steps.find_issue.outputs.result != 0 }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt('${{ steps.find_issue.outputs.result }}'),
              body: `### Fix Release Details\n\n` +
                    `**Author:** ${{ github.actor }}\n` +
                    `**Fix version:** fix${{ steps.next_fix.outputs.NEXT_FIX }}\n` +
                    `**Date:** ${new Date().toISOString()}\n` +
                    `**Docker Image:** cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.version }}_fix${{ steps.next_fix.outputs.NEXT_FIX }}\n\n` +
                    `### Commits\n${{ steps.commits.outputs.COMMITS }}`
            })
