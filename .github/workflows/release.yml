name: Release
on: [workflow_dispatch]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - run: npm ci
      - run: npm run lint
      - run: npm run test

      - name: Get previous tag
        id: get_prev_tag
        run: |
          if git describe --tags --abbrev=0; then
            echo "prev_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "prev_tag=" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

      - name: Configure YC CLI
        run: |
          mkdir -p ~/.config/yandex-cloud
          cat <<EOF > ~/.config/yandex-cloud/config.yaml
          current: github-actions
          profiles:
            github-actions:
              service-account-key:
                id: ${{ secrets.YC_ACCESS_KEY_ID }}
                service_account_id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
                private_key: ${{ secrets.YC_SECRET_ACCESS_KEY }}
          EOF

      - name: Login to Yandex Container Registry
        run: |
          # Устанавливаем YC CLI
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          # Добавляем yc в PATH
          export PATH=$HOME/yandex-cloud/bin:$PATH
          source ~/.bashrc
          
          # Получаем IAM-токен
          YC_TOKEN=$(yc iam create-token)
          echo "$YC_TOKEN" | docker login --username iam --password-stdin cr.yandex
      - name: Build and push Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.run_number }}
            cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.run_number }}_latest
          secrets: |
            {"auths":{"cr.yandex":{"username":"iam","password":"${{ secrets.YC_SECRET_ACCESS_KEY }}"}}}

      - name: Create version tag
        run: |
          git tag v${{ github.run_number }}
          git push origin v${{ github.run_number }}

      - name: Generate commit list
        id: commits
        run: |
          if [ -z "${{ steps.get_prev_tag.outputs.prev_tag }}" ]; then
            COMMITS=$(git log --pretty=format:'- %s')
          else
            COMMITS=$(git log --pretty=format:'- %s' ${{ steps.get_prev_tag.outputs.prev_tag }}..HEAD)
          fi
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          echo "## v${{ github.run_number }}" > CHANGELOG.new
          echo "${{ steps.commits.outputs.COMMITS }}" >> CHANGELOG.new
          cat CHANGELOG.md >> CHANGELOG.new
          mv CHANGELOG.new CHANGELOG.md

          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v${{ github.run_number }}"
          git push

      - name: Create Release Issue
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ github.run_number }}`,
              body: `### Release Details\n\n` +
                    `**Author:** ${{ github.actor }}\n` +
                    `**Version:** ${{ github.run_number }}\n` +
                    `**Date:** ${new Date().toISOString()}\n` +
                    `**Docker Image:** cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.run_number }}\n\n` +
                    `### Commits\n${{ steps.commits.outputs.COMMITS }}`
            })
